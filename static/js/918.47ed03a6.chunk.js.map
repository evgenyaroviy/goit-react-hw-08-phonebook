{"version":3,"file":"static/js/918.47ed03a6.chunk.js","mappings":"+NAIcA,EAAc,WACzB,IAAMC,GAAWC,EAAAA,EAAAA,MACTC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IAAtBF,MAuBT,OACE,0BACE,kBAAMG,SAvBU,SAAAC,GAClBA,EAAEC,iBACD,IAAMC,EAAOF,EAAEG,OACTC,EAAOF,EAAKG,SAASD,KAAKE,MAC1BC,EAASL,EAAKG,SAASE,OAAOD,MAC9BE,EAAO,CACNJ,KAAAA,EACAG,OAAAA,GAGeX,EAAMa,MAAK,SAAAC,GAAO,OAAIA,EAAQN,OAASA,CAArB,IAGvCO,MAAM,GAAD,OAAIP,EAAJ,6BAGLV,GAASkB,EAAAA,EAAAA,IAAgBJ,IACzBN,EAAKW,QAEP,EAIE,WACA,sCACA,kBACEC,KAAK,OACLV,KAAK,OACLW,QAAQ,2HACRC,MAAM,yIACNC,UAAQ,QAGV,wCACA,kBACEH,KAAK,MACLV,KAAK,SACLW,QAAQ,qGACRC,MAAM,+FACNC,UAAQ,QAGV,gDAIL,ECtDYC,EAAsB,WAC/B,OACI,gBAAKC,MAAO,CAAEC,WAAY,QAA1B,uCAIP,E,UCDYC,EAAS,WACpB,IAAeC,GAAYzB,EAAAA,EAAAA,IAAYC,EAAAA,IAA/BF,MACFF,GAAWC,EAAAA,EAAAA,MAMjB,OAA2B,IAApB2B,EAASC,QACd,0BACE,mBAAOJ,MAAO,CAACC,WAAY,QAA3B,oCACA,kBACEN,KAAK,OACLV,KAAK,SACLoB,SAVqB,SAAAxB,GACzBN,GAAS+B,EAAAA,EAAAA,GAAezB,EAAEG,OAAOG,MAAMoB,cAAcC,QACtD,UAaC,SAACT,EAAD,GAEH,E,UCpBYU,EAAc,WACzB,IAAMlC,GAAWC,EAAAA,EAAAA,MACXkC,GAAmBhC,EAAAA,EAAAA,IAAYiC,EAAAA,KAErCC,EAAAA,EAAAA,YAAU,WACRrC,GAASsC,EAAAA,EAAAA,MACV,GAAE,CAACtC,IAMJ,OACE,gCACGmC,QADH,IACGA,OADH,EACGA,EAAkBI,KAAI,YAA2B,IAAxBC,EAAuB,EAAvBA,GAAI9B,EAAmB,EAAnBA,KAAMG,EAAa,EAAbA,OAClC,OACE,2BACE,2BACGH,EADH,KACWG,MAEX,mBAAQO,KAAK,SAASqB,QAAS,kBAZb,SAAAD,GAC1BxC,GAAS0C,EAAAA,EAAAA,IAAgBF,GAC1B,CAU8CG,CAAoBH,EAA1B,EAA/B,sBAJOA,EASZ,KAGN,ECbD,EAfsB,WACpB,OAA6BrC,EAAAA,EAAAA,IAAYC,EAAAA,IAAjCwC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MACnB,OACE,4BACE,uCACA,SAAC9C,EAAD,KACA,qCACC6C,IAAa,gBAAKnB,MAAO,CAACC,WAAY,QAAzB,wBACbmB,IAAS,yBAAMA,EAAMC,WACtB,SAACnB,EAAD,KACA,SAACO,EAAD,MAGL,C","sources":["components/Phonebook/ContactForm.jsx","components/NotificationMessage/NotificationMessage.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/pages/PhonebookPage/PhonebookPage.jsx"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport { getContacts } from \"components/redux/selectors\";\nimport { addContactThunk } from \"components/redux/thunks\";\n\n export const ContactForm = () => {\n   const dispatch = useDispatch();\n   const { items } = useSelector(getContacts);\n   \n   const submitForm = e => {\n    e.preventDefault();\n     const form = e.target;\n     const name = form.elements.name.value;\n     const number = form.elements.number.value\n     const body = {\n            name,\n            number,\n     };\n\n     const contactExists = items.some(contact => contact.name === name);\n\n      if (contactExists) {\n      alert(`${name} is already in contacts`);\n      return;\n    } else {\n      dispatch(addContactThunk(body));\n      form.reset();\n    }\n   };\n \n  return (\n    <div>\n      <form onSubmit={submitForm}>\n      <label> Name\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      </label>\n      <label> Number\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      </label>\n      <button >Add contact</button>\n      </form>\n    </div>\n  )\n}","export const NotificationMessage = () => {\n    return (\n        <div style={{ marginLeft: '30px' }}>\n            You don't have any contact\n        </div>\n    )\n}","import { NotificationMessage } from '../NotificationMessage/NotificationMessage';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from '../redux/selectors';\nimport { filterContacts } from '../redux/filtersSlice';\n\nexport const Filter = () => {\n  const { items: contacts} = useSelector(getContacts)\n  const dispatch = useDispatch()\n\n  const handleFilterChange = e => {\n    dispatch(filterContacts(e.target.value.toLowerCase().trim()));\n  }\n\n  return contacts.length !== 0 ? (\n    <div>\n      <label style={{marginLeft: '30px'}}>Find contacts by name:\n      <input\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleFilterChange}\n              />\n        </label>\n    </div>\n  ) : (\n    <NotificationMessage />\n  );\n};","import { useDispatch, useSelector } from 'react-redux';\nimport {  getFilteredContacts } from '../redux/selectors';\nimport { useEffect } from 'react';\nimport { delContactThunk, getAllContactsThunk } from 'components/redux/thunks';\n\n\nexport const ContactList = () => {\n  const dispatch = useDispatch()\n  const filteredContacts = useSelector(getFilteredContacts)\n\n  useEffect(() => {\n    dispatch(getAllContactsThunk())\n  }, [dispatch])\n\n  const handleDeleteContact = id => {\n    dispatch(delContactThunk(id));;\n  };\n\n  return (\n    <div>\n      {filteredContacts?.map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            <div>\n              {name}: {number}\n            </div>\n            <button type=\"button\" onClick={() => handleDeleteContact(id)}>\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </div>\n  );\n};\n\n","import { ContactForm } from '../../Phonebook/ContactForm';\nimport { Filter } from '../../Filter/Filter';\nimport { ContactList } from '../../ContactList/ContactList';\nimport { useSelector } from 'react-redux';\nimport { getContacts } from '../../redux/selectors';\n\nconst PhonebookPage = () => {\n  const { isLoading, error } = useSelector(getContacts);\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      {isLoading && <div style={{marginLeft: '30px'}}>Loading...</div>}\n      {error && <div>{error.message}</div>}\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default PhonebookPage"],"names":["ContactForm","dispatch","useDispatch","items","useSelector","getContacts","onSubmit","e","preventDefault","form","target","name","elements","value","number","body","some","contact","alert","addContactThunk","reset","type","pattern","title","required","NotificationMessage","style","marginLeft","Filter","contacts","length","onChange","filterContacts","toLowerCase","trim","ContactList","filteredContacts","getFilteredContacts","useEffect","getAllContactsThunk","map","id","onClick","delContactThunk","handleDeleteContact","isLoading","error","message"],"sourceRoot":""}